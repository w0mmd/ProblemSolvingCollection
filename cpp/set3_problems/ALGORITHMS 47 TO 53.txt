
using namespace std;

struct stDate{
    short Year;
    short Month;
    short Day;
};

bool IsLeapYear(short Year)
{

    return (Year % 400 == 0) || ((Year % 4 == 0) && (Year % 100 != 0));

}

short NumberOfDaysInMonth(short Year, short Month)
{

    if (Month < 1 || Month > 12)
    {
        return 0;
    }

    int NumberOfDays[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

    return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : NumberOfDays[Month - 1];
}

bool IsLastDayInMonth(stDate Date)
{
    return (Date.Day == NumberOfDaysInMonth(Date.Year, Date.Month));
}

bool IsLastMonthInYear(short Month)
{ 
    return (Month == 12);
}

bool IsDateOneEqualDateTwo(stDate Date1, stDate Date2)
{
    return ((Date1.Year == Date2.Year && Date1.Month == Date2.Month && Date1.Day == Date2.Day) ? true : false);
}

stDate IncreaseDateByOneDay(stDate Date)
{
    short NumberOfDays = NumberOfDaysInMonth(Date.Year, Date.Month);

    if (IsLastMonthInYear(Date.Month) && IsLastDayInMonth(Date))
    {
        Date.Day = 1;
        Date.Month = 1;
        Date.Year++;
    }
    else if (IsLastDayInMonth(Date))
    {
        Date.Day = 1;
        Date.Month++;
    }
    else {
        Date.Day++;
    }

    return Date;
}

short DifferenceInDays(stDate Date1, stDate Date2, bool IncludeEndDay = false)
{
    short Counter = 0;

    while (!IsDateOneEqualDateTwo(Date1, Date2))
    {
        Date1 = IncreaseDateByOneDay(Date1);
        Counter++;
    }

    return IncludeEndDay ? Counter + 1 : Counter;
}

short DayOfWeekOrder(short Day, short Month, short Year)
{
    short a = (14 - Month) / 12;
    short y = Year - a;
    short m = Month + 12 * a - 2;
    short DayOfWeek = (Day + y + (y / 4) - (y / 100) + (y / 400) + (31 * m) / 12) % 7;
    return (DayOfWeek + 6) % 7;
}

short DayOfWeekOrder(stDate Date)
{
    return DayOfWeekOrder(Date.Day, Date.Month, Date.Year);
}

string DayShortName(short DayOfWeekOrder)
{ 
    string arrDayNames[] =
    { "Mon","Tue","Wed","Thu","Fri","Sat","Sun" };
    
    return arrDayNames[DayOfWeekOrder]; 
}

stDate GetDateFromDayOrderInYear(short DateOrderInYear, short Year)
{
    stDate Date;
    short RemainingDays = DateOrderInYear;
    short MonthDays = 0;

    Date.Year = Year;
    Date.Month = 1;

    while (true)
    {
        MonthDays = NumberOfDaysInMonth(Year, Date.Month);

        if (RemainingDays > MonthDays)
        {
            RemainingDays -= MonthDays;
            Date.Month++;
        }
        else {
            Date.Day = RemainingDays;
            break;
        }
    }

    return Date;
}

bool IsEndOfWeek(stDate Date)
{
   return DayOfWeekOrder(Date) == 6;
}

bool IsWeekEnd(stDate Date)
{
   short DayOrder = DayOfWeekOrder(Date);

   return (DayOrder == 5 || DayOrder == 6);
}

bool IsBusinessDay(stDate Date)
{
    return !IsWeekEnd(Date);
}

short DaysUntilTheEndOfWeek(stDate Date)
{
  return 6 - DayOfWeekOrder(Date);
}

short DaysUntilTheEndOfMonth(stDate Date)
{
    stDate EndOfMonth;

    EndOfMonth.Day = NumberOfDaysInMonth(Date.Year, Date.Month);
    EndOfMonth.Month = Date.Month;
    EndOfMonth.Year = Date.Year;

    return DifferenceInDays(Date, EndOfMonth, true);
}

short DaysUntilTheEndOfYear(stDate Date)
{
    stDate EndOfYear;

    EndOfYear.Day = 31;
    EndOfYear.Month = 12;
    EndOfYear.Year = Date.Year;

    return DifferenceInDays(Date, EndOfYear, true);
}

short ReadDay()
{
    short Day = 0;

    cout << "Enter a Day?\n";
    cin >> Day;

    return Day;
}

short ReadMonth()
{
    short Month = 0;

    cout << "Enter a month?\n";
    cin >> Month;

    return Month;
}

short ReadYear()
{
    short Year = 0;

    cout << "Enter a year?\n";
    cin >> Year;

    return Year;

}

stDate ReadFullDate()
{
    stDate Date;

    Date.Year = ReadYear();
    Date.Month = ReadMonth();
    Date.Day = ReadDay();

    return Date;
}


int main() 
{
    stDate Date = ReadFullDate();
    
    short DayOrderInWeek = DayOfWeekOrder(Date.Day, Date.Month, Date.Year);
    cout << "Today is " << DayShortName(DayOrderInWeek) <<
        ", " << Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

    cout << "\nIs it end of week?\n";
    if (IsEndOfWeek(Date))
    {
        cout << "Yes, it is end of week.\n";
    }
    else {
        cout << "No, it is NOT end of week.\n";

    }
    
    cout << "\nIs it weekend?\n";
    if (IsWeekEnd(Date))
    {
        cout << "Yes, it is weekend.\n";
    }
    else {
        cout << "No, it is NOT weekend.\n";
    }

    cout << "\nIs it a business day?\n";
    if (IsBusinessDay(Date))
    {
        cout << "Yes, it is a business day.\n";
    }
    else {
        cout << "No, it is NOT a business day.\n\n";
    }

    cout << "Days until end of the week: "
        << DaysUntilTheEndOfWeek(Date) << endl;

    cout << "Days until end of the month: "
        << DaysUntilTheEndOfMonth(Date) << endl;

    cout << "Days until end of the year: "
        << DaysUntilTheEndOfYear(Date) << endl;

    system("pause>0");
    return 0;
}


