
using namespace std;

bool IsLeapYear(short Year)
{

    return (Year % 400 == 0) || ((Year % 4 == 0) && (Year % 100 != 0));

}

short NumberOfDaysInMonth(short Year, short Month)
{

    if (Month < 1 || Month > 12)
    {
        return 0;
    }

    int NumberOfDays[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

    return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : NumberOfDays[Month - 1];
}

struct stDate {
    short Year;
    short Month;
    short Day;
};

bool IsLastMonthInYear(stDate Date)
{
    return (Date.Month == 12) ? true : false;
}

bool IsLastDayInMonth(stDate Date)
{
    return (Date.Day == NumberOfDaysInMonth(Date.Year, Date.Month)) ? true : false;
}

bool IsDate1BeforeDate2(stDate Date1, stDate Date2)
{ 
    return  (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

stDate IncreaseDateByOneDay(stDate Date)
{
    short NumberOfDays = NumberOfDaysInMonth(Date.Year, Date.Month);

    if (IsLastMonthInYear(Date) && IsLastDayInMonth(Date))
    {
        Date.Day = 1;
        Date.Month = 1;
        Date.Year++;
    }
    else if (IsLastDayInMonth(Date))
    {
        Date.Day = 1;
        Date.Month++;
    }
    else {
        Date.Day++;
    }

    return Date;
}

void SwapDates(stDate& Date1, stDate& Date2)
{
    stDate TempDate;

    TempDate.Year = Date1.Year;
    TempDate.Month = Date1.Month;
    TempDate.Day = Date1.Day;

    Date1.Year = Date2.Year;
    Date1.Month = Date2.Month;
    Date1.Day = Date2.Day;

    Date2.Year = TempDate.Year;
    Date2.Month = TempDate.Month;
    Date2.Day = TempDate.Day;

}

short DifferenceInDays(stDate Date1, stDate Date2, bool IncludeEndDay = false)
{
    short Counter = 0;
    short SwapFlagValue = 1;
    
    if (!IsDate1BeforeDate2(Date1, Date2))
    {
        SwapDates(Date1, Date2);
        SwapFlagValue = -1;
    }
    while (IsDate1BeforeDate2(Date1, Date2))
    {
        Counter++;
        Date1 = IncreaseDateByOneDay(Date1);
    }

    return IncludeEndDay ? ++Counter * SwapFlagValue : Counter * SwapFlagValue;

}

short ReadDay()
{
    short Day = 0;

    cout << "Enter a Day?\n";
    cin >> Day;

    return Day;
}

short ReadMonth()
{
    short Month = 0;

    cout << "Enter a month?\n";
    cin >> Month;

    return Month;
}

short ReadYear()
{
    short Year = 0;

    cout << "Enter a year?\n";
    cin >> Year;

    return Year;

}

stDate ReadFullDate()
{
    stDate Date;

    Date.Year = ReadYear();
    Date.Month = ReadMonth();
    Date.Day = ReadDay();

    return Date;
}


int main() 
{
    stDate Date1 = ReadFullDate();
    stDate Date2 = ReadFullDate();

    cout << "Difference is: " << DifferenceInDays(Date1, Date2) << "day(s).\n";
    cout << "Difference [Including end day] is: " << DifferenceInDays(Date1, Date2, true) << "day(s).\n";

    system("pause>0");
    return 0;
}
