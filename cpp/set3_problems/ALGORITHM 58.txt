
using namespace std;

struct stDate{
    short Year;
    short Month;
    short Day;
};

struct stPeriod {
    stDate StartDate;
    stDate EndDate;
};

enum enCompareDatesResults {
    Before = -1, Equal = 0, After = 1
};

bool IsDate1BeforeDate2(stDate Date1, stDate Date2)
{
    return  (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

bool IsDateOneEqualDateTwo(stDate Date1, stDate Date2)
{
    return ((Date1.Year == Date2.Year && Date1.Month == Date2.Month && Date1.Day == Date2.Day) ? true : false);
}

bool IsDate1AfterDate2(stDate Date1, stDate Date2)
{
    return (!IsDate1BeforeDate2(Date1, Date2) && !IsDateOneEqualDateTwo(Date1, Date2));
}

enCompareDatesResults CompareDates(stDate Date1, stDate Date2)
{
    if (IsDate1BeforeDate2(Date1, Date2))
        return enCompareDatesResults::Before;

    if (IsDateOneEqualDateTwo(Date1, Date2))
        return enCompareDatesResults::Equal;

    
    return enCompareDatesResults::After;
    
}

//Solutin one:
bool IsOverlapPeriod(stPeriod Period1, stPeriod Period2)
{
    return !(IsDate1BeforeDate2(Period1.EndDate, Period2.StartDate) ||
        IsDate1BeforeDate2(Period2.EndDate, Period1.StartDate));
}

// Solution two:

bool IsOverlapPeriods(stPeriod Period1, stPeriod Period2)
{
    if (CompareDates(Period1.EndDate, Period2.StartDate) == enCompareDatesResults::Before
        || CompareDates(Period2.StartDate, Period1.EndDate) == enCompareDatesResults::After
        )
        return false;
    else
        return true;
}

short ReadDay()
{
    short Day = 0;

    cout << "Enter a Day?\n";
    cin >> Day;

    return Day;
}

short ReadMonth()
{
    short Month = 0;

    cout << "Enter a month?\n";
    cin >> Month;

    return Month;
}

short ReadYear()
{
    short Year = 0;

    cout << "Enter a year?\n";
    cin >> Year;

    return Year;

}

stDate ReadFullDate()
{
    stDate Date;

    Date.Year = ReadYear();
    Date.Month = ReadMonth();
    Date.Day = ReadDay();

    return Date;
}

stPeriod ReadPeriod()
{
    stPeriod Period;

    cout << "Enter start date:\n";
    Period.StartDate = ReadFullDate();

    cout << "Enter end date:\n";
    Period.EndDate = ReadFullDate();

    return Period;
}

int main() 
{
    cout << "Enter Period 1:\n\n";
    stPeriod Period1 = ReadPeriod();

    cout << "Enter Period 2:\n\n";
    stPeriod Period2 = ReadPeriod();

    if (IsOverlapPeriods(Period1, Period2))
    {
        cout << "Yes, periods overlap.\n";
    }
    else {
        cout << "No, periods do not overlap.\n";
    }


    system("pause>0");
    return 0;
}


