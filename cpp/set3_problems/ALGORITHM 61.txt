
using namespace std;

struct stDate{
    short Year;
    short Month;
    short Day;
};

struct stPeriod {
    stDate StartDate;
    stDate EndDate;
};

enum enCompareDatesResults {
    Before = -1, Equal = 0, After = 1
};

bool isLeapYear(short Year)
{ 
    return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}

bool IsDate1BeforeDate2(stDate Date1, stDate Date2)
{
    return  (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}

bool IsDateOneEqualDateTwo(stDate Date1, stDate Date2)
{
    return ((Date1.Year == Date2.Year && Date1.Month == Date2.Month && Date1.Day == Date2.Day) ? true : false);
}

bool IsDate1AfterDate2(stDate Date1, stDate Date2)
{
    return (!IsDate1BeforeDate2(Date1, Date2) && !IsDateOneEqualDateTwo(Date1, Date2));
}

enCompareDatesResults CompareDates(stDate Date1, stDate Date2)
{
    if (IsDate1BeforeDate2(Date1, Date2))
        return enCompareDatesResults::Before;

    if (IsDateOneEqualDateTwo(Date1, Date2))
        return enCompareDatesResults::Equal;

    
    return enCompareDatesResults::After;
    
}

short NumberOfDaysInAMonth(short Month, short Year) 
{ 
    if (Month < 1 || Month>12) return  0; 

    int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    
    return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : days[Month - 1]; 
}

bool IsLastDayInMonth(stDate Date)
{ 
    return (Date.Day == NumberOfDaysInAMonth(Date.Month, Date.Year));
}

bool IsLastMonthInYear(short Month)
{
    return (Month == 12);
}

stDate IncreaseDateByOneDay(stDate Date)
{
    if (IsLastDayInMonth(Date)) 
    { 
        if (IsLastMonthInYear(Date.Month)) 
        { 
            Date.Month = 1; Date.Day = 1; Date.Year++; 
        } 
        else { 
            Date.Day = 1; Date.Month++; 
        } 
    }
    else {
        Date.Day++; 
    } 
    return Date;
}

int GetDifferenceInDays(stDate Date1, stDate Date2, bool IncludeEndDay = false) 
{
    int Days = 0; 
    while (IsDate1BeforeDate2(Date1, Date2))
    { 
        Days++;
        Date1 = IncreaseDateByOneDay(Date1); 
    }
    
    return IncludeEndDay ? ++Days : Days;
}

int PeriodLengthInDays(stPeriod Period, bool IncludeEndDate = false) 
{ 
    return GetDifferenceInDays(Period.StartDate, Period.EndDate, IncludeEndDate);
}

bool IsDateWithinPeriod(stDate Date, stPeriod Period)
{
    return !(CompareDates(Date, Period.StartDate) == enCompareDatesResults::Before
        ||
        CompareDates(Date, Period.EndDate) == enCompareDatesResults::After);
}

bool IsOverlapPeriods(stPeriod Period1, stPeriod Period2)
{
    if (CompareDates(Period1.EndDate, Period2.StartDate) == enCompareDatesResults::Before
        || CompareDates(Period2.StartDate, Period1.EndDate) == enCompareDatesResults::After
        )
        return false;
    else
        return true;
}

//First solution:
int OverlapDaysCount1(stPeriod Period1, stPeriod Period2)
{
    if (!IsOverlapPeriods(Period1, Period2))
        return 0;

    stDate StartDate = IsDate1AfterDate2(Period1.StartDate, Period2.StartDate) ? Period1.StartDate : Period2.StartDate;
    stDate EndDate = IsDate1BeforeDate2(Period1.EndDate, Period2.EndDate) ? Period1.EndDate : Period2.EndDate;
    
    return GetDifferenceInDays(StartDate, EndDate, true);
     
}

//Second solution:
int OverlapDaysCount2(stPeriod Period1, stPeriod Period2)
{
    int Period1Length = PeriodLengthInDays(Period1, true);
    int Period2Length = PeriodLengthInDays(Period2, true);
    int DaysCount = 0;

    if (!IsOverlapPeriods(Period1, Period2))
        return 0;

    if (Period1Length < Period2Length)
    {
        while (IsDate1BeforeDate2(Period1.StartDate, Period1.EndDate))
        {
            if (IsDateWithinPeriod(Period1.StartDate, Period2))
            {
                DaysCount++;
            }

            Period1.StartDate = IncreaseDateByOneDay(Period1.StartDate);
        }
    }
    else {
        while (IsDate1BeforeDate2(Period2.StartDate, Period2.EndDate))
        {
            if (IsDateWithinPeriod(Period2.StartDate, Period1))
            {
                DaysCount++;
            }

            Period2.StartDate = IncreaseDateByOneDay(Period2.StartDate);
        }
    }

    return DaysCount;
}

short ReadDay()
{
    short Day = 0;

    cout << "Enter a Day?\n";
    cin >> Day;

    return Day;
}

short ReadMonth()
{
    short Month = 0;

    cout << "Enter a month?\n";
    cin >> Month;

    return Month;
}

short ReadYear()
{
    short Year = 0;

    cout << "Enter a year?\n";
    cin >> Year;

    return Year;

}

stDate ReadFullDate()
{
    stDate Date;

    Date.Year = ReadYear();
    Date.Month = ReadMonth();
    Date.Day = ReadDay();

    return Date;
}

stPeriod ReadPeriod()
{
    stPeriod Period;

    cout << "Enter start date:\n";
    Period.StartDate = ReadFullDate();

    cout << "Enter end date:\n";
    Period.EndDate = ReadFullDate();

    return Period;
}

int main() 
{
    cout << "Enter Period 1:\n\n";
    stPeriod Period1 = ReadPeriod();
    cout << "Enter Period 2:\n\n";
    stPeriod Period2 = ReadPeriod();

    cout << "Overlap days count is: " << OverlapDaysCount1(Period1, Period2) << endl;

    system("pause>0");
    return 0;
}