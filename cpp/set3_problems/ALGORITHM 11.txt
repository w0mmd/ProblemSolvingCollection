
using namespace std;

bool IsLeapYear(short Year)
{

   return (Year % 400 == 0) || ((Year % 4 == 0) && (Year % 100 != 0));
      
}

short NumberOfDaysInMonth(short Year, short Month)
{

    if (Month < 1 || Month > 12)
    {
        return 0;
    }

    int NumberOfDays[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

    return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : NumberOfDays[Month - 1];
}

short TotalDaysFromYearBeginning(short Day, short Month, short Year)
{
    short TotalDays = 0;

    for (short i = 0; i < Month; i++)
    {
        TotalDays += NumberOfDaysInMonth(Year, i);
    }

    TotalDays += Day;

    return TotalDays;
}

void DateFromDayOrderInYear(short DayOfYear, short Year)
{
    short Month = 1;
    short Days = DayOfYear;

    while (DayOfYear > NumberOfDaysInMonth(Year, Month))
    {
        DayOfYear -= NumberOfDaysInMonth(Year, Month);
        Month++;
    }

    printf("Date for [%d] is: ", Days);
    printf("%d/%d/%d", DayOfYear, Month, Year);

}

short ReadDay()
{
    short Day = 0;

    cout << "Enter a day?\n";
    cin >> Day;

    return Day;
}

short ReadMonth()
{
    short Month = 0;

    cout << "Enter a month?\n";
    cin >> Month;

    return Month;
}

short ReadYear()
{
    short Year = 0;

    cout << "Enter a year?\n";
    cin >> Year;

    return Year;

}

int main() 
{
    short Year = ReadYear();
    short Month = ReadMonth();
    short Day = ReadDay();
    short DayOfYear = TotalDaysFromYearBeginning(Day, Month, Year);

    cout << "Number of days from the beginning of thhe year is: "
        << TotalDaysFromYearBeginning(Day, Month, Year) << endl;

    DateFromDayOrderInYear(DayOfYear, Year);


    system("pause>0");
    return 0;
}
=======================================================




using namespace std;

bool IsLeapYear(short Year)
{

   return (Year % 400 == 0) || ((Year % 4 == 0) && (Year % 100 != 0));
      
}

short NumberOfDaysInMonth(short Year, short Month)
{

    if (Month < 1 || Month > 12)
    {
        return 0;
    }

    int NumberOfDays[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

    return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : NumberOfDays[Month - 1];
}

struct stDate {
    short Year;
    short Month;
    short Day;
};

short TotalDaysFromYearBeginning(short Day, short Month, short Year)
{
    short TotalDays = 0;

    for (short i = 0; i < Month; i++)
    {
        TotalDays += NumberOfDaysInMonth(Year, i);
    }

    TotalDays += Day;

    return TotalDays;
}

stDate GetDateFromDayOrderInYear(short DateOrderInYear, short Year)
{
    stDate Date;
    short RemainingDays = DateOrderInYear;
    short MonthDays = 0;
    
    Date.Year = Year;
    Date.Month = 1;

    while (true)
    {
        MonthDays = NumberOfDaysInMonth(Year, Date.Month);

        if (RemainingDays > MonthDays)
        {
            RemainingDays -= MonthDays;
            Date.Month++;
        }
        else {
            Date.Day = RemainingDays;
            break;
        }
    }

    return Date;
}

short ReadDay()
{
    short Day = 0;

    cout << "Enter a day?\n";
    cin >> Day;

    return Day;
}

short ReadMonth()
{
    short Month = 0;

    cout << "Enter a month?\n";
    cin >> Month;

    return Month;
}

short ReadYear()
{
    short Year = 0;

    cout << "Enter a year?\n";
    cin >> Year;

    return Year;

}

int main() 
{
    short Year = ReadYear();
    short Month = ReadMonth();
    short Day = ReadDay();
    short DateOrderInYear = TotalDaysFromYearBeginning(Day, Month, Year);

    cout << "Number of days from the beginning of thhe year is: "
        << TotalDaysFromYearBeginning(Day, Month, Year) << endl;

    stDate Date;
    Date = GetDateFromDayOrderInYear(DateOrderInYear, Year);
    cout << "Date for [" << DateOrderInYear << "] is: " <<
        Date.Day << "/" << Date.Month << "/" << Date.Year << endl;

    system("pause>0");
    return 0;
}


