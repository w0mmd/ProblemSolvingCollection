using namespace std;

struct sClientData {

    string AccountNumber;
    string PinCode;
    string Name;
    string Phone;
    string AccountBalance;

};

sClientData ReadClientData()
{
    sClientData ClientData;

    cout << "Please enter account number:\n";
    getline(cin, ClientData.AccountNumber);

    cout << "\nPlease enter pin code:\n";
    getline(cin, ClientData.PinCode);

    cout << "\nPlease enter your name:\n";
    getline(cin, ClientData.Name);

    cout << "\nPlease enter phone:\n";
    getline(cin, ClientData.Phone);

    cout << "\nPlease enter account balance:\n";
    getline(cin, ClientData.AccountBalance);


    return ClientData;
}

vector<sClientData> ReadMultipleClients()
{
    vector<sClientData> vDataClient;
    char More = 'y';
    short Counter = 1;

    while (tolower(More) == 'y')
    {
        vDataClient.push_back(ReadClientData());
        Counter++;

        printf("Do you want to add client number %d? if yes [Y] if no [N]\n", Counter);
        cin >> More;
        cin.ignore();
    }

    return vDataClient;

}

string ConvertRecordToStringLine(sClientData& Client, string Delim)
{
    return (Client.AccountNumber + Delim
        + Client.PinCode + Delim
        + Client.Name + Delim
        + Client.Phone + Delim
        + Client.AccountBalance);
}

vector<string> ConvertClientsToStringLines(vector<sClientData>& Client, string Delim)
{
    vector<string> vLine;

    for (sClientData& s : Client)
    {
        vLine.push_back(ConvertRecordToStringLine(s, Delim));
    }

    return vLine;
}

string JoinString(vector<string> &vString, string Delim)
{
    string S1;
    for (string& s : vString)
    {
        S1 = S1 + s + Delim;
    }
    return S1.substr(0, S1.length() - Delim.length());
}


int main()
{
    vector<sClientData> ClientData = ReadMultipleClients();
    vector<string> ClientDataInLine = ConvertClientsToStringLines(ClientData, "#//#");

    cout << "Client record for saving is:\n";
    cout << JoinString(ClientDataInLine, "\n") << endl;


    return 0;  
}
====================================================================

using namespace std;
struct sClient
{
string AccountNumber;
string PinCode;
string Name;
string Phone;
double AccountBalance;
};
sClient ReadNewClient()
{
sClient Client;
cout << "Enter Account Number? ";
getline(cin, Client.AccountNumber);
cout << "Enter PinCode? ";
getline(cin, Client.PinCode);
cout << "Enter Name? ";
getline(cin, Client.Name);
cout << "Enter Phone? ";
getline(cin, Client.Phone);
cout << "Enter AccountBalance? ";
cin >> Client.AccountBalance;
return Client;
}

string ConvertRecordToLine(sClient Client, string Seperator =
"#//#")
{
string stClientRecord = "";
stClientRecord += Client.AccountNumber + Seperator;
stClientRecord += Client.PinCode + Seperator;
stClientRecord += Client.Name + Seperator;
stClientRecord += Client.Phone + Seperator;
stClientRecord += to_string(Client.AccountBalance);
return stClientRecord;
}
int main()
{
cout << "\nPlease Enter Client Data: \n\n";
sClient Client;
Client = ReadNewClient();
cout << "\n\nClient Record for Saving is: \n";
cout << ConvertRecordToLine(Client);
system("pause>0");
return 0;
}





