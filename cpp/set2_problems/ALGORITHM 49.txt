using namespace std;

const string ClientsFileName = "AllClientsInfo.txt";

struct stClientData {
   
   string AccountNumber;
   string PinCode;
   string Name;
   string Phone;
   double AccountBalance;

};

string ReadAccountNumber()
{
    string AccountNum = "";

    cout << "Please enter account number to start searching:\n";
    getline(cin, AccountNum);

    return AccountNum;
}

vector<string> SplitString(string S1, string Delim)
{
    short Pos = 0;
    string Word = "";

    vector<string>vString;

    while ((Pos = S1.find(Delim)) != std::string::npos)
    {
        Word = S1.substr(0, Pos);

        if (Word != "" && !all_of(Word.begin(), Word.end(), ::isspace))
        {
            vString.push_back(Word);
        }

        S1.erase(0, Pos + Delim.length());
    }

    if (!S1.empty())
    {
        vString.push_back(S1);
    }

    return vString;
}

stClientData ConvertLineToRecord(string Line, string Seperator = "#//#")
{
    stClientData Client;
    vector<string> ClientData;

    ClientData = SplitString(Line, Seperator);

    Client.AccountNumber = ClientData[0];
    Client.PinCode = ClientData[1];
    Client.Name = ClientData[2];
    Client.Phone = ClientData[3];
    Client.AccountBalance = stod(ClientData[4]);


    return Client;
}

vector<stClientData> LoadClientsDataFromFile(string FileName)
{
    vector<stClientData> vClients;
    fstream MyFile;

    MyFile.open(FileName, ios::in);

    if (MyFile.is_open())
    {
        stClientData Client;
        string Line;
        while (getline(MyFile, Line))
        {
            Client = ConvertLineToRecord(Line);
            vClients.push_back(Client);
        }

        MyFile.close();
    }
    return vClients;

}

void PrintClientInfo(const stClientData& Client)
{
    cout << "\nThe following are the client details:\n";

    cout << "Account Number : " << Client.AccountNumber << endl;
    cout << "Pin Code       : " << Client.PinCode << endl;
    cout << "Name           : " << Client.Name << endl;
    cout << "Phone          : " << Client.Phone << endl;
    cout << "Balance        : " << Client.AccountBalance << endl;
}

void SearchInVector()
{
    string WordToSearch = ReadAccountNumber();
    vector<stClientData>Clients = LoadClientsDataFromFile(ClientsFileName);
    bool Found = false;

    for (stClientData& Client : Clients)
    {
        if (Client.AccountNumber == WordToSearch)
        {
            PrintClientInfo(Client);
            Found = true;
            break;

        }
    }
    if (!Found)
    {
        cout << "Client with account number " << WordToSearch << " does not exit.\n";
    }

}

int main()
{
    SearchInVector();

    return 0;  
}

====================================================



using namespace std;

const string ClientsFileName = "Clients.txt";


struct sClient
{

string AccountNumber;
string PinCode;
string Name;
string Phone;
double AccountBalance;

};

vector<string> SplitString(string S1, string Delim)
{

vector<string> vString;

short pos = 0;

string sWord; 

while ((pos = S1.find(Delim)) != std::string::npos)
{
sWord = S1.substr(0, pos);
 
if (sWord != "")
{
vString.push_back(sWord);
}
S1.erase(0, pos + Delim.length());
}
if (S1 != "")
{
vString.push_back(S1); 
}

return vString;

}


sClient ConvertLinetoRecord(string Line, string Seperator =
"#//#")
{
sClient Client;

vector<string> vClientData;

vClientData = SplitString(Line, Seperator);

Client.AccountNumber = vClientData[0];
Client.PinCode = vClientData[1];
Client.Name = vClientData[2];
Client.Phone = vClientData[3];
Client.AccountBalance = stod(vClientData[4]);

return Client;
}



vector <sClient> LoadCleintsDataFromFile(string FileName)
{

vector <sClient> vClients;

fstream MyFile;

MyFile.open(FileName, ios::in);

if (MyFile.is_open())
{
string Line;
sClient Client;
while (getline(MyFile, Line))
{
Client = ConvertLinetoRecord(Line);
vClients.push_back(Client);
}
MyFile.close();

}

return vClients;

}

void PrintClientCard(sClient Client)
{

cout << "\nThe following are the client details:\n";
cout << "\nAccout Number: " << Client.AccountNumber;
cout << "\nPin Code : " << Client.PinCode;
cout << "\nName : " << Client.Name;
cout << "\nPhone : " << Client.Phone;
cout << "\nAccount Balance: " << Client.AccountBalance;

}

bool FindClientByAccountNumber(string AccountNumber, sClient &
Client )
{

vector <sClient> vClients =
LoadCleintsDataFromFile(ClientsFileName);

for (sClient C : vClients)
{

if (C.AccountNumber == AccountNumber)
{
Client = C;
return true;
}
}
return false;
}


string ReadClientAccountNumber()
{
string AccountNumber = "";
cout << "\nPlease enter AccountNumber? ";
cin >> AccountNumber;
return AccountNumber;
}


int main()
{

sClient Client;

string AccountNumber = ReadClientAccountNumber();

if (FindClientByAccountNumber(AccountNumber, Client))
{
PrintClientCard(Client);
}
else
{
cout << "\nClient with Account Number (" << AccountNumber <<
") is Not Found!";
}

system("pause>0");

return 0;
}
