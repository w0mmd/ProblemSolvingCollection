
int GenerateRandomNumber(int from, int to)
{
    int RandNumber = rand() % (to - from + 1) + from;

    return RandNumber;
}

void GenerateMatrix(int arri[3][3], short rows, short columns)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < columns; j++)
        {
            arri[i][j] = GenerateRandomNumber(1, 10);
        }
    }

}

void PrintMatrix(int arri[3][3], short rows, short columns)
{
    for (int i = 0; i <= rows - 1; i++)
    {
        for (int j = 0; j <= columns - 1; j++)
        {
            cout << setfill('0') << setw(2) << arri[i][j] << "       ";
        }
        cout << endl;
    }

}

bool AreIdentityMatrix(int arri[3][3], int rows, int columns)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < columns; j++)
        {
            if (i == j)
            {
                if(arri[i][j] != 1)
                return false;
            }
            else {
                if (arri[i][j] != 0)
                    return false;
            }
                
        }
    }
    return true;
}

int main()
{
    srand((unsigned)time(NULL));

    int arri[3][3];

    cout << "Matrix1:\n";
    GenerateMatrix(arri, 3, 3);
    PrintMatrix(arri, 3, 3);

    cout << endl;

    if (AreIdentityMatrix(arri, 3, 3))
    {
        cout << "Yes, matrix is identity.\n";
    }
    else {
        cout << "No, matrix is not identity\n";
    }

    return 0;  
}



==================================================


void PrintMatrix(int arri[3][3], short rows, short columns)
{
    for (int i = 0; i <= rows - 1; i++)
    {
        for (int j = 0; j <= columns - 1; j++)
        {
            cout << setfill('0') << setw(2) << arri[i][j] << "       ";
        }
        cout << endl;
    }

}

bool AreIdentityMatrix(int arri[3][3], int rows, int columns)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < columns; j++)
        {
            if (i == j && arri[i][j] != 1)
            {
                return false;
            }
            else if (i != j && arri[i][j] != 0)
            {
              
                    return false;
            }
                
        }
    }
    return true;
}

int main()
{
    srand((unsigned)time(NULL));

    int arri[3][3] = { {1,2,3},{4,5,6},{7,8,9} };

    cout << "Matrix1:\n";
    PrintMatrix(arri, 3, 3);

    cout << endl;

    if (AreIdentityMatrix(arri, 3, 3))
    {
        cout << "Yes, matrix is identity.\n";
    }
    else {
        cout << "No, matrix is not identity\n";
    }

    return 0;  
}







