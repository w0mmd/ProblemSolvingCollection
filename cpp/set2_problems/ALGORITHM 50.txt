using namespace std;

const string ClientsFileName = "AllClientsInfo.txt";

struct stClientData {
   
   string AccountNumber;
   string PinCode;
   string Name;
   string Phone;
   double AccountBalance;

};

string ReadAccountNumber()
{
    string AccountNum = "";

    cout << "Please enter account number to start searching:\n";
    getline(cin, AccountNum);

    return AccountNum;
}

vector<string> SplitString(string S1, string Delim)
{
    short Pos = 0;
    string Word = "";

    vector<string>vString;

    while ((Pos = S1.find(Delim)) != std::string::npos)
    {
        Word = S1.substr(0, Pos);

        if (Word != "" && !all_of(Word.begin(), Word.end(), ::isspace))
        {
            vString.push_back(Word);
        }

        S1.erase(0, Pos + Delim.length());
    }

    if (!S1.empty())
    {
        vString.push_back(S1);
    }

    return vString;
}

stClientData ConvertLineToRecord(string Line, string Seperator = "#//#")
{
    stClientData Client;
    vector<string> ClientData;

    ClientData = SplitString(Line, Seperator);

    Client.AccountNumber = ClientData[0];
    Client.PinCode = ClientData[1];
    Client.Name = ClientData[2];
    Client.Phone = ClientData[3];
    Client.AccountBalance = stod(ClientData[4]);


    return Client;
}

vector<stClientData> LoadClientsDataFromFile(string FileName)
{
    vector<stClientData> vClients;
    fstream MyFile;

    MyFile.open(FileName, ios::in);

    if (MyFile.is_open())
    {
        stClientData Client;
        string Line;
        while (getline(MyFile, Line))
        {
            Client = ConvertLineToRecord(Line);
            vClients.push_back(Client);
        }

        MyFile.close();
    }
    return vClients;

}

vector<stClientData> DeleteDataFromVector(vector<stClientData> Client, string WordToDelete)
{
    vector<stClientData>::iterator iter;

    for (iter = Client.begin(); iter != Client.end(); iter++)
    {
        if (iter->AccountNumber == WordToDelete)
        {
          iter = Client.erase(iter);
          break;
        }
    }

    return Client;
}

string ConvertRecordToStringLine(stClientData& Client, string Delim = "#//#")
{
    return (Client.AccountNumber + Delim
        + Client.PinCode + Delim
        + Client.Name + Delim
        + Client.Phone + Delim
        + to_string(Client.AccountBalance));
}

void PrintClientInfo(const stClientData& Client)
{
    cout << "\nThe following are the client details:\n";

    cout << "Account Number : " << Client.AccountNumber << endl;
    cout << "Pin Code       : " << Client.PinCode << endl;
    cout << "Name           : " << Client.Name << endl;
    cout << "Phone          : " << Client.Phone << endl;
    cout << "Balance        : " << Client.AccountBalance << endl;
}

void TransferVectorDataToFile(string FileName, vector<stClientData>&Client)
{
    fstream MyFile;

    MyFile.open(FileName, ios::out);

    if (MyFile.is_open())
    {
        
        for (stClientData& Line : Client)
        {
          MyFile <<  ConvertRecordToStringLine(Line) << endl;
          
        }

        MyFile.close();
    }
}

void SearchDeleteSave()
{
    vector<stClientData>Clients = LoadClientsDataFromFile(ClientsFileName);
    char More = 'Y';

    do {

        string WordToSearch = ReadAccountNumber();
        bool Found = false;

        for (stClientData& Client : Clients)
        {
            if (Client.AccountNumber == WordToSearch)
            {
                PrintClientInfo(Client);
                Found = true;

                Clients = DeleteDataFromVector(Clients, WordToSearch);
                TransferVectorDataToFile(ClientsFileName, Clients);

                cout << "File Deleted Seccussfully." << endl;
                break;

            }
        }
        if (!Found)
        {
            cout << "Client with account number " << WordToSearch << " does not exit.\n";
        }

        cout << "Do you want to delete another file ? [Y], [N] ? \n" << endl;
        cin >> More;
        cin.ignore();

    } while (toupper(More) == 'Y');

}


int main()
{
    SearchDeleteSave();

    return 0;  
}


============================================================


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <iomanip>
using namespace std;

const string ClientsFileName = "Clients.txt";

struct sClient {
    string AccountNumber;
    string PinCode;
    string Name;
    string Phone;
    double AccountBalance;
    bool MarkForDelete = false;
};

vector<string> SplitString(string S1, string Delim) {
    vector<string> vString;
    short pos = 0;
    string sWord;
    while ((pos = S1.find(Delim)) != std::string::npos) {
        sWord = S1.substr(0, pos);
        if (sWord != "") {
            vString.push_back(sWord);
        }
        S1.erase(0, pos + Delim.length());
    }
    if (S1 != "") {
        vString.push_back(S1);
    }
    return vString;
}

sClient ConvertLinetoRecord(string Line, string Seperator = "#//#") {
    sClient Client;
    vector<string> vClientData = SplitString(Line, Seperator);
    Client.AccountNumber = vClientData[0];
    Client.PinCode = vClientData[1];
    Client.Name = vClientData[2];
    Client.Phone = vClientData[3];
    Client.AccountBalance = stod(vClientData[4]);
    return Client;
}

string ConvertRecordToLine(sClient Client, string Seperator = "#//#") {
    string stClientRecord = "";
    stClientRecord += Client.AccountNumber + Seperator;
    stClientRecord += Client.PinCode + Seperator;
    stClientRecord += Client.Name + Seperator;
    stClientRecord += Client.Phone + Seperator;
    stClientRecord += to_string(Client.AccountBalance);
    return stClientRecord;
}

vector<sClient> LoadCleintsDataFromFile(string FileName) {
    vector<sClient> vClients;
    fstream MyFile;
    MyFile.open(FileName, ios::in);
    if (MyFile.is_open()) {
        string Line;
        sClient Client;
        while (getline(MyFile, Line)) {
            Client = ConvertLinetoRecord(Line);
            vClients.push_back(Client);
        }
        MyFile.close();
    }
    return vClients;
}

void PrintClientCard(sClient Client) {
    cout << "\nThe following are the client details:\n";
    cout << "\nAccout Number: " << Client.AccountNumber;
    cout << "\nPin Code : " << Client.PinCode;
    cout << "\nName : " << Client.Name;
    cout << "\nPhone : " << Client.Phone;
    cout << "\nAccount Balance: " << Client.AccountBalance;
}

bool FindClientByAccountNumber(string AccountNumber, vector<sClient> vClients, sClient& Client) {
    for (sClient C : vClients) {
        if (C.AccountNumber == AccountNumber) {
            Client = C;
            return true;
        }
    }
    return false;
}

bool MarkClientForDeleteByAccountNumber(string AccountNumber, vector<sClient>& vClients) {
    for (sClient& C : vClients) {
        if (C.AccountNumber == AccountNumber) {
            C.MarkForDelete = true;
            return true;
        }
    }
    return false;
}

vector<sClient> SaveCleintsDataToFile(string FileName, vector<sClient> vClients) {
    fstream MyFile;
    MyFile.open(FileName, ios::out);
    string DataLine;
    if (MyFile.is_open()) {
        for (sClient C : vClients) {
            if (C.MarkForDelete == false) {
                DataLine = ConvertRecordToLine(C);
                MyFile << DataLine << endl;
            }
        }
        MyFile.close();
    }
    return vClients;
}

bool DeleteClientByAccountNumber(string AccountNumber, vector<sClient>& vClients) {
    sClient Client;
    char Answer = 'n';
    if (FindClientByAccountNumber(AccountNumber, vClients, Client)) {
        PrintClientCard(Client);
        cout << "\n\nAre you sure you want delete this client? y/n ? ";
        cin >> Answer;
        if (Answer == 'y' || Answer == 'Y') {
            MarkClientForDeleteByAccountNumber(AccountNumber, vClients);
            SaveCleintsDataToFile(ClientsFileName, vClients);
            vClients = LoadCleintsDataFromFile(ClientsFileName);
            cout << "\n\nClient Deleted Successfully.";
            return true;
        }
    } else {
        cout << "\nClient with Account Number (" << AccountNumber << ") is Not Found!";
        return false;
    }
    return false;
}

string ReadClientAccountNumber() {
    string AccountNumber = "";
    cout << "\nPlease enter AccountNumber? ";
    cin >> AccountNumber;
    return AccountNumber;
}

int main() {
    vector<sClient> vClients = LoadCleintsDataFromFile(ClientsFileName);
    string AccountNumber = ReadClientAccountNumber();
    DeleteClientByAccountNumber(AccountNumber, vClients);
    system("pause>0");
    return 0;
}






=====================================================



#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

const string ClientsFileName = "AllClientsInfo.txt";

struct stClientData {
    string AccountNumber;
    string PinCode;
    string Name;
    string Phone;
    double AccountBalance;
};

string ReadAccountNumber() {
    string AccountNum;
    cout << "\nPlease enter the account number to search for:\n";
    getline(cin, AccountNum);
    return AccountNum;
}

vector<string> SplitString(string S1, string Delim) {
    short Pos = 0;
    string Word;
    vector<string> vString;

    while ((Pos = S1.find(Delim)) != string::npos) {
        Word = S1.substr(0, Pos);
        if (!Word.empty() && !all_of(Word.begin(), Word.end(), ::isspace)) {
            vString.push_back(Word);
        }
        S1.erase(0, Pos + Delim.length());
    }

    if (!S1.empty()) {
        vString.push_back(S1);
    }

    return vString;
}

stClientData ConvertLineToRecord(string Line, string Seperator = "#//#") {
    stClientData Client;
    vector<string> ClientData = SplitString(Line, Seperator);

    Client.AccountNumber = ClientData[0];
    Client.PinCode = ClientData[1];
    Client.Name = ClientData[2];
    Client.Phone = ClientData[3];
    Client.AccountBalance = stod(ClientData[4]);

    return Client;
}

string ConvertRecordToStringLine(stClientData& Client, string Delim = "#//#") {
    return (Client.AccountNumber + Delim +
            Client.PinCode + Delim +
            Client.Name + Delim +
            Client.Phone + Delim +
            to_string(Client.AccountBalance));
}

vector<stClientData> LoadClientsDataFromFile(string FileName) {
    vector<stClientData> vClients;
    fstream MyFile(FileName, ios::in);

    if (MyFile.is_open()) {
        string Line;
        while (getline(MyFile, Line)) {
            stClientData Client = ConvertLineToRecord(Line);
            vClients.push_back(Client);
        }
        MyFile.close();
    }
    return vClients;
}

void TransferVectorDataToFile(string FileName, vector<stClientData>& Clients) {
    fstream MyFile(FileName, ios::out);
    if (MyFile.is_open()) {
        for (stClientData& Client : Clients) {
            MyFile << ConvertRecordToStringLine(Client) << endl;
        }
        MyFile.close();
    }
}

vector<stClientData> DeleteDataFromVector(vector<stClientData> Clients, string WordToDelete) {
    for (auto it = Clients.begin(); it != Clients.end(); ++it) {
        if (it->AccountNumber == WordToDelete) {
            Clients.erase(it);
            break;
        }
    }
    return Clients;
}

void PrintClientInfo(const stClientData& Client) {
    cout << "\nClient Details:\n";
    cout << "----------------------\n";
    cout << "Account Number : " << Client.AccountNumber << endl;
    cout << "Pin Code       : " << Client.PinCode << endl;
    cout << "Name           : " << Client.Name << endl;
    cout << "Phone          : " << Client.Phone << endl;
    cout << "Balance        : " << Client.AccountBalance << endl;
    cout << "----------------------\n";
}

void SearchDeleteSave() {
    vector<stClientData> Clients = LoadClientsDataFromFile(ClientsFileName);
    char More = 'Y';

    do {
        string WordToSearch = ReadAccountNumber();
        bool Found = false;

        for (stClientData& Client : Clients) {
            if (Client.AccountNumber == WordToSearch) {
                PrintClientInfo(Client);
                Found = true;

                char ConfirmDelete;
                cout << "\nAre you sure you want to delete this client? (Y/N): ";
                cin >> ConfirmDelete;
                cin.ignore();

                if (toupper(ConfirmDelete) == 'Y') {
                    Clients = DeleteDataFromVector(Clients, WordToSearch);
                    TransferVectorDataToFile(ClientsFileName, Clients);
                    cout << "\nClient deleted successfully.\n";
                } else {
                    cout << "\nDeletion cancelled.\n";
                }
                break;
            }
        }

        if (!Found) {
            cout << "\nClient with account number [" << WordToSearch << "] not found.\n";
        }

        cout << "\nDo you want to delete another client? (Y/N): ";
        cin >> More;
        cin.ignore();

    } while (toupper(More) == 'Y');
}

int main() {
    SearchDeleteSave();
    return 0;
}


















