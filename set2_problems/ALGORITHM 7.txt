
void GenerateMatrixTable(int arri[3][3], short rows, short columns)
{
    int counter = 1;
    for (short i = 0; i < rows; i++)
    {
        for (short j = 0; j < columns; j++)
        {
            arri[i][j] = counter;
            counter++;
        }
    }
}

void PrintMatrixTable(int arri[3][3], short rows, short columns)
{
    for (short i = 0; i < rows; i++)
    {
        for (short j = 0; j < columns; j++)
        {
            cout << setw(2) << arri[i][j] << "       ";
        }
        cout << endl;
    }
}

void GenerateTransposedMatrix(int arri[3][3], short rows, short columns)
{
    int counter = 0;
    for (int i = 0; i < columns; i++)
    {
        for (int j = 0; j < rows; j++)
        {
            counter++;
            arri[j][i] = counter;
        }
        cout << endl;
    }
}

void PrintTransposedMatrix(int arri[3][3], short rows, short columns)
{
    for (short i = 0; i < columns; i++)
    {
        for (short j = 0; j < rows; j++)
        {
            cout << setw(2) << arri[j][i] << "       ";
        }
        cout << endl;
    }
}

int main()
{

    int arri[3][3];
    
    cout << "The following is a 3x3 ordered matrix:\n";
    GenerateMatrixTable(arri, 3, 3);
    PrintMatrixTable(arri, 3, 3);

    cout << "\n\n\n";

    cout << "The following is a 3x3 transposed matrix:\n";
    GenerateMatrixTable(arri, 3, 3);
    PrintTransposedMatrix(arri, 3, 3);

    return 0;  
}
=====================================================



void GenerateMatrixTable(int arri[3][3], short rows, short columns)
{
    int counter = 1;
    for (short i = 0; i < rows; i++)
    {
        for (short j = 0; j < columns; j++)
        {
            arri[i][j] = counter;
            counter++;
        }
    }
}

void PrintMatrixTable(int arri[3][3], short rows, short columns)
{
    for (short i = 0; i < rows; i++)
    {
        for (short j = 0; j < columns; j++)
        {
            cout << setw(2) << arri[i][j] << "       ";
        }
        cout << endl;
    }
}

void GenerateTransposedMatrix(int arri[3][3], int arriTransposed[3][3], short rows, short columns)
{

    for (short i = 0; i < columns; i++)
    {
        for (short j = 0; j < rows; j++)
        {
            arriTransposed[j][i] = arri[j][i];
        }
    }
}

void PrintTransposedMatrix(int arriTransposed[3][3], short rows, short columns)
{
    for (short i = 0; i < columns; i++)
    {
        for (short j = 0; j < rows; j++)
        {
            cout << setw(2) << arriTransposed[j][i] << "       ";
        }
        cout << endl;
    }
}

int main()
{

    int arri[3][3], arriTransposed[3][3];

    cout << "The following is a 3x3 ordered matrix:\n";
    GenerateMatrixTable(arri, 3, 3);
    PrintMatrixTable(arri, 3, 3);

    cout << "\n";

    cout << "The following is a 3x3 transposed matrix:\n";
    GenerateTransposedMatrix(arri, arriTransposed, 3, 3);
    PrintTransposedMatrix(arriTransposed, 3, 3);

    return 0;  
}



